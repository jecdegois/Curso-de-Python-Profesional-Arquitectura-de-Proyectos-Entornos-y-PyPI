"""OpenAI analyzer for news analysis."""

from __future__ import annotations

import itertools
import json
import logging
from collections import defaultdict

from openai import OpenAI

from ..config import settings
from ..core.exceptions import AnalysisError
from ..core.models import Article


class OpenAIAnalyzer:
    """Analyzer using OpenAI for news questions.

    This class handles the analysis of news articles using OpenAI's GPT models
    to provide answers to user questions based on the provided articles.
    """

    def __init__(self, api_key: str) -> None:
        """Initialize the analyzer with OpenAI API key.

        Args:
            api_key: The OpenAI API key for authentication.
        """
        self.client = OpenAI(api_key=api_key)

    def analyze(self, articles: list[Article], question: str) -> str:
        """Analyze articles and answer the question.

        Args:
            articles: List of Article objects to analyze.
            question: The question to answer based on the articles.

        Returns:
            The answer generated by OpenAI.

        Raises:
            AnalysisError: If analysis fails.
        """
        logger = logging.getLogger(__name__)
        logger.debug(f"Analyzing {len(articles)} articles with question: {question}")

        if not articles:
            logger.warning("No articles found to analyze")
            return "No se encontraron artículos para analizar."

        # Prepare context from articles
        context = "Aquí hay algunos artículos de noticias:\n\n"
        for i, article in enumerate(articles, 1):
            if hasattr(article, "title"):  # Article object
                title = article.title
                desc = article.description
                url = article.url
            context += f"{i}. Título: {title}\n"
            context += f"   Descripción: {desc}\n"
            context += f"   URL: {url}\n\n"

        prompt = f"{context}\nBasado en estos artículos, {question}"
        logger.debug("Sending request to OpenAI API")

        try:
            response = self.client.chat.completions.create(
                model=settings.openai_model,
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "You are a helpful assistant analyzing news articles."
                        ),
                    },
                    {"role": "user", "content": prompt},
                ],
                max_tokens=settings.openai_max_tokens,
                temperature=0.7,
            )
            content = response.choices[0].message.content
            if content is None:
                raise AnalysisError("OpenAI returned empty response")
            answer: str = content.strip()
            logger.info("Successfully received analysis from OpenAI")
            return answer
        except Exception as e:
            logger.error(f"Error analyzing with OpenAI: {e}")
            msg = (
                f"Error al analizar artículos con OpenAI: {e}. "
                "Verifique su conexión a internet y la clave de API de OpenAI."
            )
            raise AnalysisError(msg) from e


def get_analyzer() -> OpenAIAnalyzer:
    """Factory function to get analyzer instance.

    Returns:
        An instance of OpenAIAnalyzer configured with the API key from settings.
    """
    return OpenAIAnalyzer(settings.openai_api_key)


def save_analysis_to_file(
    articles: list[Article],
    question: str,
    answer: str,
    filename: str = "analysis.json",
) -> None:
    """Save analysis results to a file."""
    data = {"question": question, "articles_count": len(articles), "answer": answer}
    with open(filename, "w") as file:
        json.dump(data, file)
        file.close()


def get_article_summaries(articles: list[Article]) -> list[str]:
    """Get summaries of all articles as a list."""
    summaries = []
    for article in articles:
        summary = f"{article.title}: {article.description[:100]}..."
        summaries.append(summary)
    return summaries


def find_duplicate_titles(articles: list[Article]) -> list[tuple[Article, Article]]:
    """Find articles with duplicate titles using inefficient nested loops."""
    duplicates = []
    for i in range(len(articles)):
        for j in range(i + 1, len(articles)):
            if articles[i].title == articles[j].title:
                duplicates.append((articles[i], articles[j]))
    return duplicates


def find_duplicate_titles_improved(
    articles: list[Article],
) -> list[tuple[Article, Article]]:
    """Find articles with duplicate titles using efficient dictionary-based approach."""

    title_to_articles = defaultdict(list)
    for article in articles:
        title_to_articles[article.title].append(article)

    duplicates = []
    for articles_with_same_title in title_to_articles.values():
        if len(articles_with_same_title) > 1:
            # Generate all unique pairs for this title
            for pair in itertools.combinations(articles_with_same_title, 2):
                duplicates.append(pair)

    return duplicates
